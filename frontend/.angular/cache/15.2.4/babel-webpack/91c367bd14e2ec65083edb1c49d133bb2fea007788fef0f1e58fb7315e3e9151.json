{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET heroes from the server */\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n  * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;AAIrD,SAAqBC,WAAW,QAAQ,sBAAsB;;;;AAE9D,OAAM,MAAOC,WAAW;EAEtBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAyBhB,cAAS,GAAG,YAAY,CAAC,CAAE;IAsBnC,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIL,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAjD2C;EAE5C;EACA;EACAM,SAAS;IACP,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,IAAI,CAACC,SAAS,CAAC,CACzCC,IAAI,CACHV,GAAG,CAACW,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACpCb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACtD;EACL;EAEA;EACAC,OAAO,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACP,SAAS,IAAIM,EAAE,EAAE;IACrC,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAOQ,GAAG,CAAC,CAACN,IAAI,CAClCV,GAAG,CAACW,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,mBAAmBG,EAAE,EAAE,CAAC,CAAC,EAC3ChB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAO,cAAcE,EAAE,EAAE,CAAC,CAAC,CACvD;EACH;EAEA;EACQH,GAAG,CAACK,OAAe;IACzB,IAAI,CAACZ,cAAc,CAACa,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACpD;EAGA;;;;;;;EAOQJ,WAAW,CAAIM,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACT,GAAG,CAAC,GAAGO,SAAS,YAAYE,KAAK,CAACJ,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOnB,EAAE,CAACsB,MAAW,CAAC;IACxB,CAAC;EACH;EAKA;EACAG,UAAU,CAACC,IAAU;IACnB,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAC,IAAI,CAAChB,SAAS,EAAEe,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAAChB,IAAI,CAC/DV,GAAG,CAACW,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,mBAAmBY,IAAI,CAACT,EAAE,EAAE,CAAC,CAAC,EAChDhB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAM,YAAY,CAAC,CAAC,CAChD;EACH;EAEA;EACAc,OAAO,CAACH,IAAU;IAChB,OAAO,IAAI,CAACpB,IAAI,CAACwB,IAAI,CAAO,IAAI,CAACnB,SAAS,EAAEe,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAAChB,IAAI,CACtEV,GAAG,CAAE6B,OAAa,IAAK,IAAI,CAACjB,GAAG,CAAC,oBAAoBiB,OAAO,CAACd,EAAE,EAAE,CAAC,CAAC,EAClEhB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAO,SAAS,CAAC,CAAC,CAC9C;EACH;;AArEWX,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YADE;AAAM","names":["of","catchError","tap","HttpHeaders","HeroService","constructor","http","messageService","headers","getHeroes","get","heroesUrl","pipe","_","log","handleError","getHero","id","url","message","add","operation","result","error","console","updateHero","hero","put","httpOptions","addHero","post","newHero","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Alexandre Müller\\tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  /** GET heroes from the server */\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get<Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n    );\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  /**\n  * Handle Http operation that failed.\n  * Let the app continue.\n  *\n  * @param operation - name of the operation that failed\n  * @param result - optional value to return as the observable result\n  */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable<any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError<any>('updateHero'))\n    );\n  }\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError<Hero>('addHero'))\n    );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}