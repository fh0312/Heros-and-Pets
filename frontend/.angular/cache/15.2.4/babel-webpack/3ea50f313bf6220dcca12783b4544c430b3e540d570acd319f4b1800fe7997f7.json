{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class InMemoryDataService {\n  createDb() {\n    const heroes = [{\n      id: 12,\n      name: 'Dr. Nice',\n      pet: \"none\"\n    }, {\n      id: 13,\n      name: 'Bombasto',\n      pet: \"none\"\n    }, {\n      id: 14,\n      name: 'Celeritas',\n      pet: \"none\"\n    }, {\n      id: 15,\n      name: 'Magneta',\n      pet: \"none\"\n    }, {\n      id: 16,\n      name: 'RubberMan',\n      pet: \"none\"\n    }, {\n      id: 17,\n      name: 'Dynama',\n      pet: \"none\"\n    }, {\n      id: 18,\n      name: 'Dr. IQ',\n      pet: \"none\"\n    }, {\n      id: 19,\n      name: 'Magma',\n      pet: \"none\"\n    }, {\n      id: 20,\n      name: 'Tornado',\n      pet: \"none\"\n    }];\n    const pets = [{\n      name: 'Max'\n    }, {\n      name: 'Sushi'\n    }, {\n      name: 'Thor'\n    }, {\n      name: 'Billy'\n    }, {\n      name: 'Luna'\n    }, {\n      name: 'Bart'\n    }, {\n      name: 'Jolie'\n    }, {\n      name: 'Yogi'\n    }, {\n      name: 'Smarty'\n    }];\n    return {\n      heroes,\n      pets\n    };\n  }\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes) {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}\nInMemoryDataService.ɵfac = function InMemoryDataService_Factory(t) {\n  return new (t || InMemoryDataService)();\n};\nInMemoryDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InMemoryDataService,\n  factory: InMemoryDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,mBAAmB;EAC9BC,QAAQ;IACN,MAAMC,MAAM,GAAG,CACb;MAAEC,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,UAAU;MAAEC,GAAG,EAAC;IAAM,CAAC,EACvC;MAAEF,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,UAAU;MAAGC,GAAG,EAAE;IAAM,CAAC,EACzC;MAAEF,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,WAAW;MAAEC,GAAG,EAAE;IAAM,CAAE,EAC1C;MAAEF,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAEC,GAAG,EAAE;IAAM,CAAE,EACxC;MAAEF,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,WAAW;MAAEC,GAAG,EAAE;IAAM,CAAE,EAC1C;MAAEF,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,QAAQ;MAAEC,GAAG,EAAE;IAAM,CAAE,EACvC;MAAEF,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,QAAQ;MAAGC,GAAG,EAAE;IAAM,CAAE,EACxC;MAAEF,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,OAAO;MAAGC,GAAG,EAAE;IAAM,CAAE,EACvC;MAAEF,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAGC,GAAG,EAAE;IAAM,CAAE,CAC1C;IAED,MAAMC,IAAI,GAAG,CACX;MAAEF,IAAI,EAAE;IAAK,CAAE,EACf;MAAEA,IAAI,EAAE;IAAO,CAAE,EACjB;MAAEA,IAAI,EAAE;IAAM,CAAE,EAChB;MAAEA,IAAI,EAAE;IAAO,CAAE,EACjB;MAAEA,IAAI,EAAE;IAAM,CAAE,EAChB;MAAEA,IAAI,EAAE;IAAM,CAAE,EAChB;MAAEA,IAAI,EAAE;IAAO,CAAE,EACjB;MAAEA,IAAI,EAAE;IAAM,CAAE,EAChB;MAAEA,IAAI,EAAE;IAAQ,CAAE,CACnB;IACD,OAAO;MAACF,MAAM;MAAEI;IAAI,CAAC;EACvB;EAEA;EACA;EACA;EACA;EACA;EACAC,KAAK,CAACL,MAAc;IAClB,OAAOA,MAAM,CAACM,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGR,MAAM,CAACS,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACT,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE;EAC9E;;AAnCWH,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAa,SAAnBb,mBAAmB;EAAAc,YAFlB;AAAM","names":["InMemoryDataService","createDb","heroes","id","name","pet","pets","genId","length","Math","max","map","hero","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Alexandre Müller\\tour-of-heroes\\src\\app\\in-memory-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\nimport { Pet } from './pet';\n@Injectable({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 12, name: 'Dr. Nice', pet:\"none\"},\n      { id: 13, name: 'Bombasto' , pet: \"none\"},\n      { id: 14, name: 'Celeritas', pet: \"none\" },\n      { id: 15, name: 'Magneta', pet: \"none\" },\n      { id: 16, name: 'RubberMan', pet: \"none\" },\n      { id: 17, name: 'Dynama', pet: \"none\" },\n      { id: 18, name: 'Dr. IQ' , pet: \"none\" },\n      { id: 19, name: 'Magma',  pet: \"none\" },\n      { id: 20, name: 'Tornado',  pet: \"none\" }\n    ];\n\n    const pets = [\n      { name: 'Max' },\n      { name: 'Sushi' },\n      { name: 'Thor' },\n      { name: 'Billy' },\n      { name: 'Luna' },\n      { name: 'Bart' },\n      { name: 'Jolie' },\n      { name: 'Yogi' },\n      { name: 'Smarty' }\n    ];\n    return {heroes, pets};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}