{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HEROES } from './mock-heroes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(catchError(this.handleError('getHeroes', [])));\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n  * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAkB,gBAAgB;AAErD,SAASC,MAAM,QAAQ,eAAe;;;;AAItC,OAAM,MAAOC,WAAW;EAEtBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAsBhB,cAAS,GAAG,YAAY,CAAC,CAAE;EAtBS;EAE5C;EACAC,SAAS;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACC,SAAS,CAAC,CACzCC,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACtD;EACL;EAEAC,OAAO,CAACC,EAAU;IAChB;IACA;IACA,MAAMC,IAAI,GAAGZ,MAAM,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACP,cAAc,CAACW,GAAG,CAAC,gCAAgCJ,EAAE,EAAE,CAAC;IAC7D,OAAOb,EAAE,CAACc,IAAI,CAAC;EACjB;EAEA;EACQI,GAAG,CAACC,OAAe;IACzB,IAAI,CAACb,cAAc,CAACW,GAAG,CAAC,gBAAgBE,OAAO,EAAE,CAAC;EACpD;EAGA;;;;;;;EAOMR,WAAW,CAAIS,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACJ,GAAG,CAAC,GAAGE,SAAS,YAAYE,KAAK,CAACH,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOnB,EAAE,CAACqB,MAAW,CAAC;IACxB,CAAC;EACH;;AA/CalB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YADE;AAAM","names":["of","catchError","HEROES","HeroService","constructor","http","messageService","getHeroes","get","heroesUrl","pipe","handleError","getHero","id","hero","find","h","add","log","message","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Alexandre Müller\\tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  /**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError<T>(operation = 'operation', result?: T) {\n  return (error: any): Observable<T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}