{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class InMemoryDataService {\n  createDb() {\n    const heroes = [{\n      id: 12,\n      name: 'Dr. Nice'\n    }, {\n      id: 13,\n      name: 'Bombasto'\n    }, {\n      id: 14,\n      name: 'Celeritas'\n    }, {\n      id: 15,\n      name: 'Magneta'\n    }, {\n      id: 16,\n      name: 'RubberMan'\n    }, {\n      id: 17,\n      name: 'Dynama'\n    }, {\n      id: 18,\n      name: 'Dr. IQ'\n    }, {\n      id: 19,\n      name: 'Magma'\n    }, {\n      id: 20,\n      name: 'Tornado'\n    }];\n    const pets = [{\n      name: 'Dr. Nice'\n    }, {\n      name: 'Bombasto'\n    }, {\n      name: 'Celeritas'\n    }, {\n      name: 'Magneta'\n    }, {\n      name: 'RubberMan'\n    }, {\n      name: 'Dynama'\n    }, {\n      name: 'Dr. IQ'\n    }, {\n      name: 'Magma'\n    }, {\n      name: 'Tornado'\n    }];\n    return {\n      heroes,\n      pets\n    };\n  }\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes) {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}\nInMemoryDataService.ɵfac = function InMemoryDataService_Factory(t) {\n  return new (t || InMemoryDataService)();\n};\nInMemoryDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InMemoryDataService,\n  factory: InMemoryDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,mBAAmB;EAC9BC,QAAQ;IACN,MAAMC,MAAM,GAAG,CACb;MAAEC,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAE,EAC5B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAE,EAC5B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAW,CAAE,EAC7B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAS,CAAE,EAC3B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAW,CAAE,EAC7B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAQ,CAAE,EAC1B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAQ,CAAE,EAC1B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAO,CAAE,EACzB;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAS,CAAE,CAC5B;IAED,MAAMC,IAAI,GAAG,CACX;MAAED,IAAI,EAAE;IAAU,CAAE,EACpB;MAAEA,IAAI,EAAE;IAAU,CAAE,EACpB;MAAEA,IAAI,EAAE;IAAW,CAAE,EACrB;MAAEA,IAAI,EAAE;IAAS,CAAE,EACnB;MAAEA,IAAI,EAAE;IAAW,CAAE,EACrB;MAAEA,IAAI,EAAE;IAAQ,CAAE,EAClB;MAAEA,IAAI,EAAE;IAAQ,CAAE,EAClB;MAAEA,IAAI,EAAE;IAAO,CAAE,EACjB;MAAEA,IAAI,EAAE;IAAS,CAAE,CACpB;IACD,OAAO;MAACF,MAAM;MAAEG;IAAI,CAAC;EACvB;EAEA;EACA;EACA;EACA;EACA;EACAC,KAAK,CAACJ,MAAc;IAClB,OAAOA,MAAM,CAACK,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGP,MAAM,CAACQ,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACR,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE;EAC9E;;AAnCWH,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAY,SAAnBZ,mBAAmB;EAAAa,YAFlB;AAAM","names":["InMemoryDataService","createDb","heroes","id","name","pets","genId","length","Math","max","map","hero","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Alexandre Müller\\tour-of-heroes\\src\\app\\in-memory-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\nimport { Pet } from './pet';\n@Injectable({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 12, name: 'Dr. Nice' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr. IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n\n    const pets = [\n      { name: 'Dr. Nice' },\n      { name: 'Bombasto' },\n      { name: 'Celeritas' },\n      { name: 'Magneta' },\n      { name: 'RubberMan' },\n      { name: 'Dynama' },\n      { name: 'Dr. IQ' },\n      { name: 'Magma' },\n      { name: 'Tornado' }\n    ];\n    return {heroes, pets};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}