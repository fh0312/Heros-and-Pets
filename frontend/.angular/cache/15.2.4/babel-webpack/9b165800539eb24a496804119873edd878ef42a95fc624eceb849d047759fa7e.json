{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class PetsService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.petsUrl = 'api/pets'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getPets() {\n    return this.http.get(this.petsUrl).pipe(tap(_ => this.log('fetched pets')), catchError(this.handleError('getPets', [])));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`PetService: ${message}`);\n  }\n}\nPetsService.ɵfac = function PetsService_Factory(t) {\n  return new (t || PetsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nPetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PetsService,\n  factory: PetsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;AAErD,SAAqBC,EAAE,QAAQ,MAAM;;;;AAKrC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,cAA8B;IAAxD,SAAI,GAAJD,IAAI;IAAsB,mBAAc,GAAdC,cAAc;IAJpD,YAAO,GAAG,UAAU,CAAC,CAAE;IAC/B,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIR,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAC+E;EAEhFS,OAAO;IACL,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,IAAI,CAACC,OAAO,CAAC,CACtCC,IAAI,CACHV,GAAG,CAACW,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,cAAc,CAAC,CAAC,EAClCb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAQ,SAAS,EAAE,EAAE,CAAC,CAAC,CACnD;EACL;EAEQA,WAAW,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACJ,GAAG,CAAC,GAAGE,SAAS,YAAYE,KAAK,CAACE,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOjB,EAAE,CAACc,MAAW,CAAC;IACxB,CAAC;EACH;EAEA;EACQH,GAAG,CAACM,OAAe;IACzB,IAAI,CAACb,cAAc,CAACc,GAAG,CAAC,eAAeD,OAAO,EAAE,CAAC;EACnD;;AAhCWhB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkB,SAAXlB,WAAW;EAAAmB,YAFV;AAAM","names":["HttpHeaders","catchError","tap","of","PetsService","constructor","http","messageService","headers","getPets","get","petsUrl","pipe","_","log","handleError","operation","result","error","console","message","add","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\2002f\\OneDrive - Universidade de Lisboa\\Ambiente de Trabalho\\tour-of-heroes\\src\\app\\pets.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Pet } from './pet';\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from './message.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class PetsService {\n  private petsUrl = 'api/pets';  // URL to web api\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  constructor(private http: HttpClient, private messageService: MessageService) { }\n\n  getPets(): Observable<Pet[]> {\n    return this.http.get<Pet[]>(this.petsUrl)\n      .pipe(\n        tap(_ => this.log('fetched pets')),\n        catchError(this.handleError<Pet[]>('getPets', []))\n      );\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`PetService: ${message}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}